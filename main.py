#!/usr/bin/env python3
import sys
import os
from random import random
from typing import Dict

# –î–æ–±–∞–≤–ª—è–µ–º src/ –≤ PYTHONPATH, —á—Ç–æ–±—ã –ø–∞–∫–µ—Ç—ã my_game –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
here = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(here, "src"))

from my_game.characters.player import Player
from my_game.characters.character_class import CharacterClass
from my_game.characters.player_character import PlayerCharacter
from my_game.utils.cli_utils import (
    prompt_int,
    prompt_str,
    choose_from_list,
    exit_program,
)
from my_game.utils.monster_utils import generate_enemies_for_tier
from my_game.battle.dispatcher import take_turn as ai_take_turn
from my_game.items.store import Store
from my_game.items.item import GearItem, PotionItem
from my_game.config import CONFIG

# ‚Äî‚Äî‚Äî –ú–∞–≥–∞–∑–∏–Ω ‚Äî‚Äî‚Äî
players: Dict[int, Player] = {}
store = Store()

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ gear.yaml
_gear_cfg = CONFIG.get("gear", {})
QUALITY_NAMES = {
    q_name: info.get("display_name", q_name)
    for q_name, info in _gear_cfg.get("quality_tiers", {}).items()
}
CLASS_LABELS = _gear_cfg.get("class_labels", {})


def create_player():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞", None)
        if pid in players:
            print(f"‚ùå –ò–≥—Ä–æ–∫ —Å ID={pid} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        name = prompt_str("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞")
    except ValueError as e:
        print("‚ùå", e)
        return

    players[pid] = Player(id=pid, username=name)
    print(f"‚úÖ –ò–≥—Ä–æ–∫ {name!r} —Å–æ–∑–¥–∞–Ω (ID={pid}).")


def create_character():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    cls = choose_from_list(
        list(CharacterClass),
        lambda c: (
            f"{c.name} ‚Äî {c.display_name} "
            f"(HP={c.base_health}, STR={c.base_strength}, "
            f"AGI={c.base_agility}, INT={c.base_intelligence})"
        ),
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:",
    )

    pc = player.create_character("Leon", cls)
    print(
        f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ {pc.name!r} —Å–æ–∑–¥–∞–Ω: –∫–ª–∞—Å—Å {cls.display_name}, "
        f"HP={pc.health}, STR={pc.strength}, AGI={pc.agility}, INT={pc.intelligence}."
    )


def list_characters():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    if not player.characters:
        print("‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
        return

    print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞ {player.username!r} (ID={pid}):")
    for pc in player.characters:
        status = "–∂–∏–≤" if pc.is_alive else "–ø–æ–≤–µ—Ä–∂–µ–Ω"
        exp_next = pc.exp_to_next()
        print(
            f" ‚Ä¢ {pc.name:15s} | {pc.char_class.name:<7s} | lvl {pc.level:<2d} | "
            f"HP {pc.health:<3d}/{pc.max_health:<3d} | "
            f"STR {pc.strength:<2d} | AGI {pc.agility:<2d} | "
            f"INT {pc.intelligence:<2d} | "
            f"EXP {pc.exp}/{exp_next} | {status}"
        )


def rest():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
        if not player.characters:
            raise ValueError("–£ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    pc = choose_from_list(
        player.characters,
        lambda c: f"{c.name} (HP {c.health}/{c.max_health})",
        "–ö–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–¥—ã—Ö–∞—Ç—å?",
    )
    pc.health = pc.max_health
    pc.mana = pc.base_mana
    print(f"üí§ {pc.name} –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: HP={pc.health}/{pc.max_health}.")


def shop():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    gear = store.available_gear()
    potions = store.available_potions()
    goods = gear + potions
    if not goods:
        print("‚ÑπÔ∏è –ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")
        return

    print(f"\nüí∞ –í–∞—à–µ –∑–æ–ª–æ—Ç–æ: {player.gold}")
    for idx, item in enumerate(goods, 1):
        if isinstance(item, GearItem):
            # –õ–æ–∫–∞–ª–∏–∑—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤
            q_ru = QUALITY_NAMES.get(item.quality.name, item.quality.name)
            classes_ru = ", ".join(
                CLASS_LABELS.get(c.name, c.name) for c in item.allowed_classes
            )
            stats = ", ".join(f"{k}+{v}" for k, v in item.stats.items())
            print(
                f"{idx}. {item.name} [{q_ru} ‚Ä¢ {classes_ru}] "
                f"({item.slot.name}) {stats} ‚Äî {item.price}g"
            )
        else:
            desc = []
            if item.heal:
                desc.append(f"HP+{item.heal}")
            if item.mana:
                desc.append(f"MP+{item.mana}")
            print(f"{idx}. {item.name} ({', '.join(desc)}) ‚Äî {item.price}g")

    choice = prompt_int("–ö—É–ø–∏—Ç—å –Ω–æ–º–µ—Ä (0 - –≤—ã—Ö–æ–¥)", 0)
    if choice <= 0 or choice > len(goods):
        return
    item = goods[choice - 1]
    if not player.spend_gold(item.price):
        print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")
        return
    player.add_item(item)
    print(f"üõí –ö—É–ø–ª–µ–Ω–æ: {item.name}")


def inventory():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    if not player.inventory:
        print("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return

    for idx, item in enumerate(player.inventory, 1):
        if isinstance(item, GearItem):
            print(f"{idx}. {item.name} ({item.slot.name})")
        else:
            desc = []
            if item.heal:
                desc.append(f"HP+{item.heal}")
            if item.mana:
                desc.append(f"MP+{item.mana}")
            print(f"{idx}. {item.name} ({', '.join(desc)})")

    choice = prompt_int("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å/–Ω–∞–¥–µ—Ç—å –Ω–æ–º–µ—Ä (0 - –≤—ã—Ö–æ–¥)", 0)
    if choice <= 0 or choice > len(player.inventory):
        return
    item = player.inventory.pop(choice - 1)

    if not player.characters:
        print("–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
        player.add_item(item)
        return

    pc = choose_from_list(
        player.characters,
        lambda c: f"{c.name} (HP {c.health}/{c.max_health})",
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
    )

    if isinstance(item, GearItem):
        replaced = pc.equip_item(item)
        if replaced:
            player.add_item(replaced)
        print(f"üõ° {pc.name} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–ª {item.name} –≤ —Å–ª–æ—Ç {item.slot.name}")
    else:
        pc.consume_potion(item)
        print(f"üß™ {pc.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {item.name}")


def fight():
    try:
        pid = prompt_int("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞")
        player = players[pid]
        if not player.characters:
            raise ValueError("–£ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –±–æ—è.")
    except (ValueError, KeyError) as e:
        print("‚ùå", e)
        return

    pc = choose_from_list(
        player.characters,
        lambda c: f"{c.name} (lvl {c.level}, HP {c.health}/{c.max_health})",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:",
    )

    tiers = CONFIG["monsters"]["monster_tiers"]
    tier_keys = ["tier1", "tier2", "tier3", "tier4"]
    sel = choose_from_list(
        tier_keys,
        display_fn=lambda t: f"{tiers[t]['name']} ‚Äî {tiers[t]['description']}",
        prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—è",
    )
    tier = tier_keys.index(sel) + 1
    enemies = generate_enemies_for_tier(tier)

    participants = [pc] + enemies
    print(f"\n‚öîÔ∏è  –ù–∞—á–∞–ª–æ –±–æ—è (—Ç–∏—Ä {tier} ‚Äî {tiers[sel]['name']})")
    for e in enemies:
        print(f"   ‚Ä¢ {e.name} (—É—Ä. {e.level}) ‚Äî HP {e.health}/{e.max_health}")
    print(f"üîπ {pc.name} (lvl {pc.level}) ‚Äî HP {pc.health}/{pc.max_health}\n")

    round_num = 1
    while pc.is_alive and any(m.is_alive for m in enemies):
        print(f"=== –†–∞—É–Ω–¥ {round_num} ===")
        order = [p for p in participants if p.is_alive]
        order.sort(key=lambda x: x.agility + random() * 0.1, reverse=True)

        for actor in order:
            if isinstance(actor, PlayerCharacter):
                ai_take_turn(actor, [m for m in enemies if m.is_alive])
            else:
                ai_take_turn(actor, pc)

            if not pc.is_alive or not any(m.is_alive for m in enemies):
                break

        round_num += 1
        print()

    if pc.is_alive:
        base = CONFIG["growth"]["xp_rewards"][f"tier{tier}"]
        count = len(enemies)
        reward = base * count * 1.2 if count > 1 else base
        pc.add_exp(reward)
        gold = int(reward // 10)
        pc.owner.add_gold(gold)
        print(f"üéâ –ü–æ–±–µ–¥–∞! {pc.name!r} –ø–æ–ª—É—á–∞–µ—Ç {reward} XP –∏ {gold} –∑–æ–ª–æ—Ç–∞")
    else:
        print(f"‚ò†Ô∏è  –ü–æ—Ä–∞–∂–µ–Ω–∏–µ... {pc.name!r} –ø–∞–ª –≤ –±–æ—é.")


def main():
    actions = {
        "1": ("–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞", create_player),
        "2": ("–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", create_character),
        "3": ("–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", list_characters),
        "4": ("–ë–æ–π —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏", fight),
        "5": ("–û—Ç–¥–æ—Ö–Ω—É—Ç—å", rest),
        "6": ("–ú–∞–≥–∞–∑–∏–Ω", shop),
        "7": ("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", inventory),
        "8": ("–í—ã—Ö–æ–¥", exit_program),
    }

    while True:
        print("\n=== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===")
        for key, (desc, _) in actions.items():
            print(f"{key}. {desc}")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
        action = actions.get(choice)
        if action:
            action[1]()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


if __name__ == "__main__":
    main()
