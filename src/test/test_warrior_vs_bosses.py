#!/usr/bin/env python3
import sys
import os
import random
import io
import contextlib
from collections import Counter, defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º src/ –≤ PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from my_game.characters.player import Player
from my_game.characters.character_class import CharacterClass
from my_game.monsters.monster import Monster
from my_game.battle.dispatcher import take_turn
from my_game.config import CONFIG


def simulate_group_battle(pc, monsters, tier):
    """–°–∏–º—É–ª—è—Ü–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –±–æ—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (win: bool, remaining_hp: int)."""
    # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    pc.health = pc.max_health
    if hasattr(pc, "mana"):
        pc.mana = pc.base_mana
    for m in monsters:
        m.health = m.max_health

    # –ì–ª—É—à–∏–º –±–æ–µ–≤–æ–π –ª–æ–≥
    buf = io.StringIO()
    with contextlib.redirect_stdout(buf):
        participants = [pc] + monsters
        while pc.is_alive and any(m.is_alive for m in monsters):
            # –ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞: –ø–æ –ª–æ–≤–∫–æ—Å—Ç–∏ + —á—É—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            participants.sort(
                key=lambda x: x.agility + random.random() * 0.1, reverse=True
            )
            for actor in participants:
                if not actor.is_alive:
                    continue
                if actor == pc:
                    targets = [m for m in monsters if m.is_alive]
                    if targets:
                        take_turn(pc, targets)
                else:
                    take_turn(actor, pc)
                if not pc.is_alive or not any(m.is_alive for m in monsters):
                    break

        win = pc.is_alive
        xp = CONFIG["growth"]["xp_rewards"][f"tier{tier}"]
        pc.add_exp(xp if win else xp // 2)

    buf.close()
    return win, pc.health


def run_trials(
    hero,
    tier=3,
    trials=1000,
    group_min=1,
    group_max=3,
):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é –±–æ—ë–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω—Å—Ç—Ä–æ–≤ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏—Ä–∞
    tier_key = f"tier{tier}"
    tier_list = CONFIG["monsters"]["monster_tiers"][tier_key]["monsters"]

    results = Counter()
    hps_after = []
    wins_by_group = defaultdict(int)
    total_monsters = 0
    group_sizes = []

    current_streak = 0
    max_streak = 0
    max_streak_start = 0
    streak_start = 1
    streak_start_level = hero.level
    max_streak_level = hero.level

    for i in range(1, trials + 1):
        group_size = random.randint(group_min, group_max)
        group_types = tuple(sorted(random.choices(tier_list, k=group_size)))
        group_sizes.append(group_size)
        total_monsters += group_size

        # –ú–æ–∂–Ω–æ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –º–æ–Ω—Å—Ç—Ä–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–µ—Ä–æ—è
        monsters = [Monster.from_config(t, level=hero.level + 4) for t in group_types]

        win, hp_after = simulate_group_battle(hero, monsters, tier=tier)

        results["wins" if win else "losses"] += 1
        hps_after.append(hp_after)
        if win:
            wins_by_group[group_types] += 1

        if win:
            if current_streak == 0:
                streak_start = i
                streak_start_level = hero.level
            current_streak += 1
            if current_streak > max_streak:
                max_streak = current_streak
                max_streak_start = streak_start
                max_streak_level = streak_start_level
        else:
            current_streak = 0

    total = results["wins"] + results["losses"]
    win_rate = results["wins"] / total * 100 if total else 0
    avg_hp = sum(hps_after) / len(hps_after) if hps_after else 0
    avg_group_size = sum(group_sizes) / len(group_sizes) if group_sizes else 0

    stats = {
        "tier": tier,
        "trials": total,
        "wins": results["wins"],
        "losses": results["losses"],
        "win_rate": win_rate,
        "avg_hp_after": avg_hp,
        "hero_max_hp": hero.max_health,
        "avg_group_size": avg_group_size,
        "total_monsters": total_monsters,
        "max_streak": max_streak,
        "max_streak_start_battle": max_streak_start,
        "max_streak_start_level": max_streak_level,
        "wins_by_group": dict(wins_by_group),
    }
    return stats


def format_stats_text(stats):
    """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç."""
    lines = []
    lines.append(
        f"=== üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (tier {stats['tier']}, –≥—Ä—É–ø–ø–∞ 1-3 –º–æ–Ω—Å—Ç—Ä–∞) ==="
    )
    lines.append(f"–í—Å–µ–≥–æ –±–æ—ë–≤: {stats['trials']}")
    lines.append(
        f"–ü–æ–±–µ–¥: {stats['wins']}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']} ({stats['win_rate']:.1f}%)"
    )
    lines.append(
        f"–°—Ä–µ–¥–Ω–µ–µ HP –ø–æ—Å–ª–µ –±–æ—è: {stats['avg_hp_after']:.1f}/{stats['hero_max_hp']}"
    )
    lines.append(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤—Ä–∞–≥–æ–≤: {stats['avg_group_size']:.2f}")
    lines.append(f"–í—Å–µ–≥–æ –≤—Ä–∞–≥–æ–≤ –≤—Å—Ç—Ä–µ—á–µ–Ω–æ: {stats['total_monsters']}")
    lines.append(
        f"–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø–æ–±–µ–¥: {stats['max_streak']} –±–æ—ë–≤ "
        f"(–Ω–∞—á–∞–ª–∞—Å—å —Å –±–æ—è #{stats['max_streak_start_battle']}, —É—Ä–æ–≤–µ–Ω—å {stats['max_streak_start_level']})"
    )

    lines.append("\n=== üßü –ü–æ–±–µ–¥—ã –ø–æ —Å–æ—Å—Ç–∞–≤–∞–º –≥—Ä—É–ø–ø ===")
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–±–µ–¥ (—É–±—ã–≤–∞–Ω–∏–µ)
    for group, count in sorted(stats["wins_by_group"].items(), key=lambda x: -x[1]):
        group_str = ", ".join(group)
        lines.append(f"{group_str}: {count} –ø–æ–±–µ–¥")

    return "\n".join(lines)


def main(output_path="stats.txt", print_to_stdout=True):
    random.seed(random.randint(0, 1000))

    player = Player(id=1, username="Tester")
    hero = player.create_character("Leon", CharacterClass.ROGUE)

    stats = run_trials(hero, tier=4, trials=1000, group_min=1, group_max=3)
    text = format_stats_text(stats)

    # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(text)
        f.write("\n")

    if print_to_stdout:
        print(text)
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_path)}")


if __name__ == "__main__":
    main()

    # python -m src.test.test_warrior_vs_bosses
    # python -m src.test.test_warrior_vs_bosses -o tier4_stats.txt
