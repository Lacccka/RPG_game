import sys
import random
from typing import Callable, Sequence, TypeVar, Tuple, List

from ..config import CONFIG
from ..monsters.monster import Monster
from ..characters.player_character import PlayerCharacter
from .monster_utils import generate_enemies_for_tier  # <-- –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º

T = TypeVar("T")


def prompt_int(prompt: str, default: int | None = None) -> int:
    raw = input(f"{prompt}{f' [{default}]' if default is not None else ''}: ").strip()
    if not raw:
        if default is not None:
            return default
        raise ValueError("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥")
    try:
        return int(raw)
    except ValueError:
        raise ValueError(f"–û–∂–∏–¥–∞–ª–æ—Å—å —á–∏—Å–ª–æ, –ø–æ–ª—É—á–∏–ª–∏ {raw!r}")


def prompt_str(prompt: str, allow_empty: bool = False) -> str:
    s = input(f"{prompt}: ").strip()
    if not s and not allow_empty:
        raise ValueError("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞")
    return s


def choose_from_list(
    items: Sequence[T], display_fn: Callable[[T], str], prompt: str
) -> T:
    print(prompt)
    for i, item in enumerate(items, start=1):
        print(f" {i}. {display_fn(item)}")
    raw = input(f"–í—ã–±–µ—Ä–∏—Ç–µ [1‚Äì{len(items)}] (default=1): ").strip()
    try:
        idx = int(raw)
        if 1 <= idx <= len(items):
            return items[idx - 1]
    except Exception:
        pass
    return items[0]


def exit_program():
    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    sys.exit(0)


def choose_monsters_for_battle(
    player_char: PlayerCharacter,
) -> Tuple[List[Monster], int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (enemies, tier), –≥–¥–µ enemies ‚Äî —Å–ø–∏—Å–æ–∫ –∏–∑ 1‚Äì3 Monster,
    –∞ tier ‚Äî —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.
    """
    # --- –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (—Ç–∏—Ä) ---
    tiers_conf = CONFIG["monsters"]["monster_tiers"]
    tier_keys = ["tier1", "tier2", "tier3", "tier4"]

    selected_tier = choose_from_list(
        tier_keys,
        display_fn=lambda t: f"{tiers_conf[t]['name']} ‚Äî {tiers_conf[t]['description']}",
        prompt="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—è",
    )
    tier = tier_keys.index(selected_tier) + 1

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1‚Äì3 –≤—Ä–∞–≥–∞ –ø–æ —Ç–∏—Ä—É ---
    enemies = generate_enemies_for_tier(tier)

    # --- –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–∞–≥–∞—Ö ---
    print(f"\n‚öîÔ∏è –ë–æ–π (—Ç–∏—Ä {tier} ‚Äî {tiers_conf[selected_tier]['name']}):")
    for e in enemies:
        print(
            f"  ‚Ä¢ {e.name.capitalize()} (—É—Ä. {e.level}) ‚Äî HP {e.health}/{e.max_health}"
        )

    return enemies, tier
